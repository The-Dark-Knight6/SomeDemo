vue路由的优化写法以及其拥有子路由的时候的写法，在有使用到子路由的时候需要在vue页面中使用<router-view>这个标签，如需要缓存子路由则可以写成<keep-alive><router-view></router-view></keep-alive>这样子路由就可以显示在<router-view>这对标签里头了。
 {
	path: '/scene',
	component: resolve => require(['@/components/AI/scene/index'], resolve),
	redirect: { path: '/scene/time' },
	children: [{
			path: 'time',
			component: resolve => require(['@/components/AI/scene/Time/time'], resolve),
		},
		{
			path: 'area',
			component: resolve => require(['@/components/AI/scene/area/area'], resolve),
		}, {
			path: 'weather',
			component: resolve => require(['@/components/AI/scene/weather/weather'], resolve),
		},
	]
}

vue跨域代理多个写法：
 proxyTable: {
  '/api2': {
	target: 'https://***.***.com/',
	changeOrigin: true,
	pathRewrite: {
		'^/api2': ''
	}
},
	'/api': {
		target: 'http://***.***.com/',
		changeOrigin: true,
		pathRewrite: {
			'^/api': ''
		}
	}
	
},

对于vue（或者其它类型表单上传）上传表单文件（或文件，ajax不能上传文件），需要new一个FormData()对象，之后用for...in循环将表单内的数据循环到这个对象上。
let data=new FormData();for(let i in params){data.appent(i,params[i])};
上传的参数就改为data即可。如果还有需要上传文件，则先获取到文件：
let file=document.getElementById('filename').files[0];params.file=file;之后同上。
如果需要上传图片，并且图片的每次更改都会相应的显示：首先在type='file'的input绑定onchange事件sowhat($event)：
sowhat(ev) {
      let name = ev.target.files[0];
      let src = window.URL.createObjectURL(name);
      this.editForm.img = src;
    },
其中src参数即可用来更改图片的相应路径。

如果需要按cdn方式引入关联文件到vue中（或者是插件）可以在index.html页面中：
   <!-- element-Ui的样式文件 以下放置于<head></head>之间-->
    <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">
	  <!-- vue的相应依赖cdn引入 优化项目整体大小 加快页面载入 以下放于<body></body>之间-->
      <script src="https://cdn.bootcss.com/vue/2.5.2/vue.min.js"></script>
      <script src="https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"></script>
      <script src="https://cdn.bootcss.com/axios/0.18.0/axios.min.js"></script>
      <script src="https://unpkg.com/element-ui/lib/index.js"></script>
	  之后在webpack.base.conf.js文件中的module.exports={}中加入：
	  externals: {
    'vue': 'Vue',
    'vue-router': 'VueRouter',
    'axios': 'axios',
    'element-ui': 'ELEMENT',
 }（详细参照个人项目源码）
 之后直接在项目中使用element-ui（或者其它vue组件）即可。

上传图片判断大小：
// html
<input type="file" accept="image/png" name="iconFile" @change="getFile">
// js
getFile (e) {
    let imgSrc = window.URL.createObjectURL(e.target.files[0]);
    let img = new Image();
    img.src = imgSrc;
    let this_ = this; // onload 里面不能用this
    let type = this.formData.iconFile.type.split('/')[1];
    img.onload = function () {
    	// 我在这里就可以获取到图片的宽度和高度了 img.width 、img.height
        if ((img.width === 192) && (img.height === 192) && (type === 'png')) {
        this_.$Message.success({content: '真棒！！！'})
        // todo
        } else {
            e.target.value = null
            this_.$Message.error({content: '选的啥玩意！'})
        }
    };
},

【vue设置倒计时按钮（指定倒计时后才可以再次激发相关操作）】
template里写：
<el-button type="text" v-show="threelater" @click="tosend">发送验证码</el-button>
  <el-button type="text" v-show="!threelater" 	disabled>{{timer}}秒后可重新发送验证码</el-button>
data里写：
timer:60,
threelater:true,
methods里写：
tosend(){
	this.threelater=false;
	let set_time=setInterval(()=>{
		this.timer--;
		if(this.timer<=0){
			this.threelater=true;
			clearInterval(set_time);
		}
	},1000)
}

【vue高德地图绘制行驶轨迹（路线规划）】
AMap.plugin("AMap.Geocoder", function () {
	var geocoder = new AMap.Geocoder({
	  radius: 1000, //范围，默认：500
	});
	var lnglat = [jing, wei]; //经纬度
	geocoder.getAddress(lnglat, function (status, result) {
	  address = result.regeocode.formattedAddress;
	  if (status === "complete" && result.regeocode) {
		let address = result.regeocode.formattedAddress;
		document.getElementById('place').innerHTML = address;
	  } else {
		console.log("获取地址失败");
	  }
	});
});
*必须使用AMap.plugin('高德插件')来声明使用到的插件，不然在vue项目中会报错。
*address变量得到的值不可返回，只可用dom相关操作来渲染到相关dom节点上。
*更多地图使用参考高德地图js API。

【刷新当前vue页面】
1、在app.vue中书写：
<template>
  <div id="app">
    <router-view v-if="isRouterAlive"></router-view>
  </div>
</template>
<script>
export default {
  name: "App",
  provide() {
    return {
      reload: this.reload
    };
  },
  data() {
    return {
      isRouterAlive: true
    };
  },

  methods: {
    reload() {
      this.isRouterAlive = false;
      this.$nextTick(function() {
        this.isRouterAlive = true;
      });
    }
  }
};
</script>
2、在需要使用的组件中注入即可。
<script>
export default {
  name: "App",
  inject:['reload'],//注入
  data() {
    return {
    };
  },

  methods: {
  //在需要使用刷新当前页面的方法下使用即可
    getlist(){
		this.reload(); //即可加载当前页面
	}
  }
};
</script>
*参考地址：https://www.cnblogs.com/yinn/p/9056731.html

【vue父子组件之间的数据传递】
・・父组件：
//首先引入 子组件
import child from "./child"; 
components: {
    child
  },
//这里设置的弹框  在子组件标签中也写入v-if=‘dialogVisible’这样可以避免子组件渲染数据时出现只保留第一次渲染的数据，即getdata得到的是postdata的第一次传输过去的数据。
//closediog、finish为父组件自定义的方法，postdata为父组件传输给子组件的数据
<el-dialog :visible.sync="dialogVisible" width="60%">
      <child v-if="dialogVisible" @closediog="closediog" @finish="finish" :getdata="postdata"></child	>
    </el-dialog>

・・子组件：
//得到父组件的数据 即相当于子组件data里的数据
props: ["getdata"], //父组件传过来的数据
//反馈给父组件的方法 closediog、finish为子组件响应的方法，false为传过去的数据
this.$emit("closediog", false);
this.$emit("finish", false);

【vue中使用echarts】
*如若需进入页面即调用echarts图表，需要将初始函数在mounted()里调用。

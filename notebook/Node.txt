notes:node教程参见菜鸟教程node.js教程以及廖雪峰官方网站node教程。

【node安装】
终端常见命令：
node -v 查看当前安装node.js版本。
npm -v 查看当前安装npm版本。
node name.js（name为js文件名称）：运行当前name.js文件。

【node repl （交互式解释器）】
可以在终端调试js代码。
使用方法：终端中输入 node。下方出现 > 即可启用repl。
repl常见命令：
ctrl + c : 退出当前终端状态。
ctri + c （按两下c）：退出 repl。
ctrl + d ：退出repl。
tab：列出当前命令。

【node模块】
单独的一个js文件即可成为一个模块。
在模块内使用：module.exports = name;来暴露出该模块的输出变量。
引入其它模块输出的变量： var variable = require('./相对路径')。
多个变量输出：module.exports = {name1:name1,name2:name2}。
接受多个变量：var variable = require('./路径');variable.name1。

【fs模块】
nodejs文件系统模块，负责读写文件。
读取文件：var fs = require('fs');
	fs.readFile('name.txt','utf-8',function(err,data){
	if(err){console.log(err);//失败返回}else{console.log(data);//成功返回}
	})//异步读取文件，同步不记录，参见文档
写入文件：var fs = require('fs');
	var data = '这是写入的数据。';
	fs.writeFile('name.txt',data,function(err){
	if(err){console.log(err);}else{console.log('success');}
	})
读取文件信息：var fs = require('fs');
	fs.stat('name.txt',function(err,data){
	if(err){console.log(err);}else{console.log('iffile:'+data.ifFile());
	if(data.isFile()){console.log('file_size:'+data.size);}}
	})
	
【stream】
写入文件流：let fs = require('fs');
let wr = fa.createWriteStream('name.txt','utf-8');
wr.write('this is writing words ... \n');
wr.end();
读取文件流：let fs = require('fs');
let re = fs.createReadStream('name.txt');
re.on('data',function(chunk){
console.log(chunk);
))//读取成功
re.on('end',function(){
console.log('end');
})//读取结束
re.on('error',function(err){
console.log(err);})//读取有误
读取流（createReadStream）的pipe方法：将读取流中的数据赋值到写入流当中来。
let fs = require('fs');
let wr = fs.createWriteStream('name.txt');
let re = fs.createReadStream('name2.txt');
re.pipe(wr);//这样写入流中的文本内容就会和读取流中的文本内容相同（即name2.txt===name.txt）。
 
【http模块】
request:封装了http请求。
response:封装了http响应。
let http = require('http');
let server = http.createServer(function(request,response){
response.writeHead(200,{'Content-Type':'text/html'});
response.end('<p>this is first server</p>'); //把响应的http内容写入html中
})
server.linsten(8088);//监听8088端口
解析url使用url模块，通过parse()方法将一个url字符串转化为url对象：
let url = require('url');
console.log(url.parse('www.baidu.com'));
处理本地文件目录使用path模块：
let path = require('path');
console.log(path.resolve('.'));//解析当前目录（打开当前目录）

【crypto】
crypto：用于提供通用的加密和哈希算法（详见教程对crypto的解释）
	
【express】
基于nodejs的一个框架。
express创建app：使用npm install express --save安装express的依赖。
let express = require('express');
let app = express();
app.get('/',function(req,res){
	res.send('hello,express');
})
let server = app.listen(3000,function(){
	let host = server.adress().adress;
	let port = server.adress().port();
	console.log('the server is running at : 127.0.0.1:',host,port);
})

【使用express创建后端服务】
1、前提条件，电脑已装好node服务。
2、新建目录，进入该目录（在目录下shift+右键，选择“在此处打开命令窗口”），输入npm init。
3、继续在该目录下输入命令npm install express。
4、继续输入npm install -g express-generator。
5、继续输入express。（有回答的直接回车即可）
6、输入npm install。
7、输入npm start。（此时express项目运行在http://127.0.0.1:3000/）
――express连接mysql数据库
1、
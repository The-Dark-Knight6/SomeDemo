【小程序使用weui】
1、新建小程序项目（此处省略步骤）。
2、打开weui的github地址：https://github.com/Tencent/weui-wxss，下载源代码。
3、解压缩包，复制dist/style下的weui.wxss文件。
4、在第一步中的小程序项目的根目录引入weui.wxss文件。
5、在项目app.wxss中引入：@import “weui.wxss”。

*下载的dist文件中的example是weui的例子展示，使用时可以打开这些wxml文件进行赋值即可。
*如使用无效，请检查所使用的wxml文件同级的js文件是否声明了Page({})。

【小程序自定义tabbar】
1、app.json中tabBar{custom:true}。

2、根目录创建custom-tab-bar文件夹，其下创建四个小程序文件
（index.json/index.js/index.wxml/index.wxss）。

3、在第2个目录下的index.js书写：
Component({
    data: {
        selected: 0,
        color: 'black',
        selectedColor: "#3874ff",
        tab: [{
                "pagePath": "/pages/index/index",
                "text": "首页",
                "iconPath": "/images/window/home.png",
                "selectedIconPath": "/images/window/homed.png"
            },
            {
                "pagePath": "/pages/myself/myself",
                "text": "我的",
                "iconPath": "/images/window/my.png",
                "selectedIconPath": "/images/window/myed.png"
            }
        ]
    },
    methods: {
        switchTab(e) {
            const data = e.currentTarget.dataset
            const url = data.path
            wx.switchTab({
                url:url
            })
        }
    }
})

4、在第2步中的index.wxml中书写自己需要的tabbar栏目样式和布局。

5、在使用到的切换组件的onShow()中书写：
this.getTabBar().setData({
	selected: 1 //此处数字即为当前页面所在tab数组的顺序，对应即可
})

【指南】

1、小程序主要开发语言为javascript，同时逻辑层和渲染层是分开的，即有些js库（jq，zepto）在小程序中是无法使用的。
2、json数据格式在小程序中的作用：静态配置。json格式为key-value键值对模式，必须用双引号，不可加备注，被[}包裹着，同时不能使用js中undefined这个数据类型。
3、wxml模版类似于网页开发中的html，其中标签有些许的改变，同时采用和vue，react框架类似的mvvm逻辑和渲染分开的方式。
4、wxss样式类似于css，增加了尺寸单位rpx，适用于小程序的页面像素尺寸。
5、js逻辑交互。即小程序中的逻辑层，处理小程序的所有交互。
6、wxml模版：wx:for="{{array}}"，当前项下标默认变量名为index，变量名为item。也可以使用wx:for-index和wx:for-item来指定当前数组的下标名以及变量名。wx:key来指定项目中的惟一标识符。
7、template模块可以动态使用，用name定义声明，之后在<template is="name"/>中使用。
8、使用import和include进行页面间的相互引用。
9、样式的引用：@import './test.wxss'。
10、小程序脚本执行顺序同app.json中文件的顺序一致。App()构造器存在于项目根目录里的app.js中，其它js文件可以通过getApp()来获取程序实例。即other.js中，let globel=getApp();
11、由于所有页面逻辑都是跑在同一个jsCore中，固使用setTimeout或者setInterval的时候在离开当前所使用这个函数的页面时候并未清楚这些定时器，需要手动来进行清理。
12、this.setDate()函数用来渲染更新data()中的数据。
13、普通点击事件（轻触点击屏幕）bindtap=""，catchbind=""阻止事件冒泡的点击事件，
14、wx.redirectTo是两个页面间的平行跳转，跳转后是没有返回到上一页的，而wx.navigateTo是父子页面间的跳转，跳转后是可以返回到上一页的所以当使用wx.redirectTo跳转的时候，onUnload:function():页面关闭函数会被执行，当使用wx.navigateTo跳转的时候，onHide:function():页面隐藏函数会被执行
15、hover-class=""点击button时的反馈，应用wxml模版中。loading="{{loading}}"可以用来生成加载效果，loading在js中值为布尔值。wx.showToast({})用来弹出提示，详见小程序api。
wx.showModal({})用于弹框错误提示，提醒用户下一步操作，模拟对话框。
16、下拉刷新：在page.json中{enablePullDownRefresh:true}，而后逻辑js中使用onPullDownRefresh(){}调用这个方法。同时上拉触底{"onReachBottomDistance": 100 }，js中onReachBottom(){}。// 当界面的下方距离页面底部距离小于100像素时触发回调
17、wx.request({})这个api用来发起http请求，前提需要绑定服务器域名。其中小程序发起的http请求必须是https请求，必须提供https服务的接口，同时请求的域名需要在小程序管理平台进行设置。通过data参数可以给接口传递所需要的相应参数。
18、设置接口返回数据的超时时间  "networkTimeout": {"request": 3000}在小程序根目录中的app.json中。详见官方文档，发起https网络通信。wx.scanCode({})，调用微信扫一扫api。
19、一个小程序仅有一个App实例，全局页面共享，其它页面可以通过getApp()方法获取注册在App()中的函数或参数。
20、自定义的组件和其它的基本模块页面类似，只是需要在该组件的json文件中注明：{"component":true}，此时js文件中可以定义相应的参数和方法，而后需要使用该组件时需要在json中写明这个组件的名字（自定义的名字）和路径：{"usingComponent":{"my-component":"../divcomponent/divcomponent"}}。详情参见小程序官方文档。
21、同时在组件中可以使用<slot></slot>（vue中这个叫做插槽）来进行在使用该组件的文件汇总提供一个渲染节点。即：<my-component><view>这个是使用组件的slot节点的地方，提供给宿主一个增加渲染界面的地方</view></my-component>。在组件中wxml中需要写上<slot></slot>。默认情况下一个组件只能开启一个slot，不过需要过个可以在js中开启。详情见文档。
22、同时在使用组件的时候对于样式的使用也有相应的规范，参见文档。
23、组件生命周期：lifetimes:{attached:{},//组件进入页面节点时执行detached:{}//组件从页面节点销毁时执行}。
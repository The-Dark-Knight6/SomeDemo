【一些笔记】
在使用element中的分页时，遇到每页显示的条数
 <el-pagination
@size-change="handleSizeChange"
@current-change="handleCurrentChange"
:current-page="currentPage"
:page-sizes="[10,20, 50, 80, 100]"
:page-size="10"
layout="total, sizes, prev, pager, next, jumper"
:total="total"
>></el-pagination>
handleCurrentChange(){}为翻页函数，handleSizeChange(){}为每页展示多少条数的函数。
前者可以传入参数调用接口渲染，后者给接口传入多少条数的参数即可。例如：getdata(page){}是获取数据的函数，则前者传入page用来翻页，后者则可以增加参数到函数所调用的接口中，需要后台接口支持显示每页展示多少的条数。

【element-ui多选框的全选问题】
<el-checkbox v-model="checkAll" @change="handleCheckAllChange">全选</el-checkbox>
<el-checkbox-group v-model="checkedCities" @change="handleCheckedCitiesChange">
  <el-checkbox v-for="(city,i) in cities" :label="city.name" :key="i">{{city.name}}</el-checkbox>
</el-checkbox-group>

data(){
  return {
    //全选
    checkAll: false,
    cities: [
      {
        "name":"高一",
        "value":"928"
      },
      {
        "name":"高二",
        "value":"929"
      },
      {
        "name":"高三",
        "value":"930"
      }
    ], //数据源
    checkedCities:[], //绑定默认选中
  }
  
  methods:{
  handleCheckAllChange(val) {
    if(this.checkAll){
        this.cities.forEach(item=>{
            this.checkedCities.push(item.name)
        })
    }else {
        this.checkedCities = []
    }

},
handleCheckedCitiesChange(value) {
    console.log(this.checkedCities);
    if(this.checkedCities.length == this.cities.length){
        this.checkAll=true
    }else{
        this.checkAll=false
    }
}
  }
  
【element-ui图片上传】
 <el-upload
            action="#"
            :http-request="httpRequest"
            list-type="picture-card"
            :on-preview="handlePictureCardPreview"
            :on-remove="handleRemove"
            :before-upload="beforeAvatarUpload"
            :file-list="productImgs" //成功上传图片的列表
            :limit="1" //限制只能上传一个图片
          >
            <i class="el-icon-plus"></i>
          </el-upload>
   //图片上传
    httpRequest(e, fileList) {
      let name = e.file,
        params = {},
        data = new FormData(),
        url = this.api.picupdata;
      params.image = name;
      for (let i in params) {
        data.append(i, params[i]);
      }
      this.$http.post(url, data).then(res => {
        let my = res.data;
        if (my.status == 1) {
          this.addform.file_id = my.data.file_id;
          this.$message({
            type: "success",
            message: "上传成功!"
          });
        } else {
          this.$message("上传失败!");
          this.productImgs.splice(0,1);
          // console.log(this.productImgs);
        }
      });
    },
	   //上传图片的限制
    beforeAvatarUpload(file) {
      const isIMAGE = file.type === "image/jpeg" || "image/png";
      const isLt2M = file.size / 1024 / 1024 < 2;
      if (!isIMAGE) {
        this.$message.error("上传图片只能是 JPG或png 格式!");
      }
      if (!isLt2M) {
        this.$message.error("上传图片大小不能超过 2MB!");
      }
      return isIMAGE && isLt2M;
	  
	  //以下为另一种限制写法
	   let mytype = file.type;
      let isimg = file.type === "image/jpg" || "image/png";
      // const isLt2M = file.size / 1024 / 1024 < 2;
      // if (!isjpg || !ispng || !isjpeg) {
      //   this.$message.error("上传图片只能是 JPG或png 格式!");
      // } else {
      if (mytype.indexOf("image") == -1) {
        this.$message.error("只能上传图片!");
        this.productImgs = [];
      } else if (!isimg) {
        this.$message.error("上传图片只能是 JPG或png 格式!");
        this.productImgs = [];
      } else {
        const isSize = new Promise(function(resolve, reject) {
          let width = 800;
          let height = 480;
          let _URL = window.URL || window.webkitURL;
          let img = new Image();
          img.onload = function() {
            let valid = img.width == width && img.height == height;
            valid ? resolve() : reject();
          };
          img.src = _URL.createObjectURL(file);
        }).then(
          () => {
            return file;
          },
          () => {
            this.$message.error("上传的图片尺寸必须为800*480");
            return Promise.reject();
          }
        );
        return isSize;
      }
	  
    },
    //删除图片
    handleRemove(file, fileList) {
      console.log(file, fileList);
    },
    // 上传的 图片放大
    handlePictureCardPreview(file) {
      this.dialogImageUrl = file.url;
      this.picvisible = true;
    }

【element-ui后台初始界面模版】
<template>
  <div class="masterQuotations">
    <el-form ref="form" :model="form" size="small">
      <el-form-item label="活动区域：">
        <el-select v-model="form.region" placeholder="请选择活动区域">
          <el-option label="区域一" value="shanghai"></el-option>
          <el-option label="区域二" value="beijing"></el-option>
        </el-select>
        <el-button size="small" type="primary">查询</el-button>
        <el-button size="small" type="success" style="float:right">发布</el-button>
      </el-form-item>
    </el-form>
    <el-table :data="tableData" style="width: 100%" size="small" border>
      <el-table-column type="index" label="序号"></el-table-column>
      <el-table-column prop="name" label="发布时间"></el-table-column>
      <el-table-column prop="address" label="内容摘要"></el-table-column>
      <el-table-column prop="name" label="点赞数"></el-table-column>
      <el-table-column prop="name" label="分享数"></el-table-column>
      <el-table-column prop="name" label="状态"></el-table-column>
      <el-table-column prop="name" label="操作">
        <template slot-scope>
          <el-button size="small" plain type="primary">隐藏</el-button>
          <el-button size="small" plain>显示</el-button>
        </template>
      </el-table-column>
    </el-table>
     <div class="paginations">
      <el-pagination
        @current-change="handleCurrentChange"
        :current-page.sync="page"
        layout="total,prev, pager, next, jumper"
        :total="total"
      ></el-pagination>
    </div>
  </div>
</template>

<script>
export default {
  name: "masterQuotations",
  data() {
    return {
      page:1,
      total:1,
      tableData: [],
      form: {}
    };
  },
  created(){

  },
  methods:{
    handleCurrentChange(){},
  }
};
</script>

<style lang="scss" scoped>
.el-input {
  width: auto;
}
.paginations{
  margin-top: 12px;
  text-align: center;
}
</style>

【vue上传大型文件（MP4、.apk、.exe等到七牛云写法）】
先安装vue对七牛云的依赖 
而后引入 import * as qiniu from "qiniu-js";
最后在  <input
            type="file"
            accept=".apk"
            ref="file"
            name="skin"
            @change="uploadqiniu($event)"
            class="el-button el-button--primary el-button--small"
          />即可。
		  
  //上传 版本文件apk 获取七牛 token  （后台书写一个获取七牛云服务的token接口）
    gettoken() {
      let url =
          "http://optmj.****",
        params;
      this.$http.get(url, { params: params }).then(res => {
        let my = res.data;
        this.upvideo = my.data.token;  //upvideo就是传给下个函数的token。
      });
    },
    //上传视频
    uploadqiniu(ev) {
      var uptoken = this.upvideo;
      var file = ev.target.files[0]; //Blob 对象，上传的文件
      var key = file.name; // 上传后文件资源名以设置的 key 为主，如果 key 为 null 或者 undefined，则文件资源名会以 hash 值作为资源名。

      let config = {
        useCdnDomain: true, //表示是否使用 cdn 加速域名，为布尔值，true 表示使用，默认为 false。
        domain: "http://*****",
        region: qiniu.region.z2 // 根据具体提示修改上传地区,当为 null 或 undefined 时，自动分析上传域名区域
      };

      let putExtra = {
        fname: "", //文件原文件名
        params: {}, //用来放置自定义变量
        mimeType: null //用来限制上传文件类型，为 null 时表示不对文件类型限制；限制类型放到数组里： ["image/png", "image/jpeg", "image/gif"]
      };
      var observable = qiniu.upload(file, key, uptoken, putExtra, config);
      observable.subscribe({
        next: result => {
          // 主要用来展示进度
          //this.$message(result);
        },
        error: errResult => {
          // 失败报错信息
          this.$message(errResult);
        },
        complete: result => {
          // 接收成功后返回的信息   url就是需要的url
          this.url = "http://video.didi365.com/" + result.key;
          this.$message({
            type: "success",
            message: "上传成功"
          });
        }
      });
    },

【刷新当前vue页面】
参考地址：https://www.cnblogs.com/yinn/p/9056731.html；
1、在app.vue中书写：
<template>
  <div id="app">
    <router-view v-if="isRouterAlive"></router-view>
  </div>
</template>

<script>
export default {
  name: "App",
  provide() {
    return {
      reload: this.reload
    };
  },
  data() {
    return {
      isRouterAlive: true
    };
  },

  methods: {
    reload() {
      this.isRouterAlive = false;
      this.$nextTick(function() {
        this.isRouterAlive = true;
      });
    }
  }
};
</script>
2、在需要使用的组件中注入即可。
如：component.vue:
<template>
</template>

<script>
export default {
  name: "App",
  inject:['reload'],//注入
  data() {
    return {
    };
  },

  methods: {
  //在需要使用刷新当前页面的方法下使用即可
    getlist(){
		this.reload(); //即可加载当前页面
	}
  }
};
</script>
【vue父子组件之间的数据传递】
・・父组件：
//首先引入 子组件
import child from "./child"; 
components: {
    child
  },
//这里设置的弹框  在子组件标签中也写入v-if=‘dialogVisible’这样可以避免子组件渲染数据时出现只保留第一次渲染的数据，即getdata得到的是postdata的第一次传输过去的数据。
//closediog、finish为父组件自定义的方法，postdata为父组件传输给子组件的数据
<el-dialog :visible.sync="dialogVisible" width="60%">
      <child v-if="dialogVisible" @closediog="closediog" @finish="finish" :getdata="postdata"></child	>
    </el-dialog>

・・子组件：
//得到父组件的数据 即相当于子组件data里的数据
props: ["getdata"], //父组件传过来的数据
//反馈给父组件的方法 closediog、finish为子组件响应的方法，false为传过去的数据
this.$emit("closediog", false);
this.$emit("finish", false);
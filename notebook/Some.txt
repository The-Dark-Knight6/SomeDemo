ECMAScript是一种语言标准，JavaScript是这个标准的一种实现。
js严格区分大小写。f12中console可以直接进行js调试写js代码。

数据类型：数字（Number），字符串（string），布尔值（true，false），
null（空值），undefined（值未定义），数组，对象，函数。

模版字符串``反引号书写，可连接多个变量或者按格式换行等。
toUpperCase()将一个字符串全部转换为大写。
toLowerCase()将一个字符串全部转换为小写。

indexOf()搜索指定字符串（数组）所出现的位置。
substring()返回指定索引区间的字符串。
slice()返回指定区间的数组元素。slice(0,3)返回第一个和第四个元素之间的三个。
push()向数组末尾添加若干元素，pop()将数组最后一个元素删除掉。
unshift()向数组头部添加若干元素，shift()将数组第一个元素删除掉。
sort()对数组进行排序。
reverse()反转字符串。
splice()从指定引索开始删除若干元素，再从该位置添加若干元素。
concat()将当前数组和另一个数组连接起来返回一个新的数组。
join()将当前数组每个元素用指定字符连接起来并返回。

js对象由键值对组成，键为属性，值即为属性的值。
for(var i in list){i+list[i]}可以遍历对象的键值对。
es6新增数据类型Map()和Set()。iterable新的类型。
arguments关键字存在函数内部，用来指向传入函数的所有参数，可以用来判断传入参数的个数。
rest参数只写在最后，用...来标识，为es6新增参数，指向...后的所有参数。
js引擎会自动在语句后面加上分号用来表示当前语句的结束。

变量提升：将后置声明的变量提升到前面，但所赋予的值并没有一起提升。
var,let,const三者都可定义变量，let,const为块状作用域，const为常亮必须要初始化赋值。
解构赋值，同时对一组变量进行赋值。var [x,y,z] = ['hello','stark','nice'];
在一个对象中绑定函数，称为这个对象的方法。
高阶函数，让函数的参数接收别的函数。eg:map(),reduce(),
function fos(x,y,f){return f(x)+f(y)};
var a = fos(-5,5,Math.abs);
filter()用来将限定条件的array去掉返回新的array。
sort()方法默认排序将所有元素转换为string类型，通过元素ASCII码值进行比较。

js闭包：在一个函数中又定义另外一个函数，且内部的函数引用外部函数的变量。
regexp（正则表达式）：/d匹配一个数字，/w匹配一个字母或数字，
*匹配任意个字符，+匹配至少一个字符，?匹配0个或1个字符，
{n}匹配n个字符，{n,m}匹配n-m个字符,/s匹配空格字符，
/转义字符转换特殊的字符，如'-'表示为/- ，[]为表示的范围，
js中表示regexp：var reg =  /^\d{3}\-\d{3,8}$/;
测试正则表达式：reg.test('000-0000')//return true

json为一种数据交换格式。将js对象转换为json字符串:json.stringify(),
将json字符串转换为json格式字符串：json.parse()
window浏览器对象，window.innerHeight显示网页的净高，
window.innerWidth显示网页的净宽（除去浏览器的菜单栏、工具栏、边框等占位元素）
outerWidth,outerHeight获取浏览器窗口的整个高度。

match()方法，用来在字符串中检索指定的值，或找到和regexp的匹配（需要有标志g）。
区别和indexOf()不同，match()方法返回指定的值，而不是指定值的位置。
var a = 'hello,world';a.match('world');//返回 world.
var b = '1,part,2,parts,3';b.match(/\d+/g);//返回 1,2,3.

&lt;转义为<,&gt;转义为>,&nbsp;转义为空格,&amp;转义为&.
insertBefore(a,b)将a元素插入到b元素前面，需要找到b元素的父元素。
replaceChild(a,b)将a元素替换为b元素，需要找到b元素的父元素。
更换标签栏的小图标<link rel="shortcut icon" href="url" type="image/x-icon" />

<div class="container">
<div class="row"><div class="col-xs-6">content</div></div></div>
.col-xs(超小型),.col-sm(平板),.col-md(中型电脑),.col-lg(大型电脑)。
.col-md-offset-*(位偏移，该列左外边距增加*列)。
列的嵌套：在row的一列之中嵌套row，其列数<=12。

(05-11)购买服务器申请备案、着手准备vue个人博客项目。
服务器的简单配置（腾讯云centos7.2 64位）：
1、下载xshell6进入到服务器（用户名、密码、公网ip）
2、安装nginx及配置（https://blog.csdn.net/wxyjuly/article/details/79443432）
3、利用winscp连接服务器（上传文件）
在以上条件下使用vue开发项目时需要安装：（nodejs、npm、cnpm、端口、代理）
1、安装nodejs（百度寻找最优方法，坑有时候也还是要踩的）
https://www.cnblogs.com/baby123/p/6955396.html
2、升级nodejs到最新版本（提供一些比较好的链接）
https://www.cnblogs.com/xiashan17/p/6907537.html
3、增加服务器的端口（vue运行需要80**的端口）
https://blog.csdn.net/github_39533414/article/details/79675678
4、添加nginx.conf中的相关内容开放端口（目录为：/usr/local/nginx/conf/nginx.conf）
server{... 
	location / {
	#不用看了 看不懂。。。直接cope
	 proxy_set_header X-Real-IP $remote_addr;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     proxy_set_header Host  $http_host;
     proxy_set_header X-Nginx-Proxy true;
     proxy_set_header Connection "";
     proxy_pass   http://127.0.0.1:8080; 
	 }
	 ...
	 }
5、安装pm2，后台运行多个服务：（即不用持续手动的开启npm run dev来运行vue项目，而是自动开启
这样当关闭xshell时你的网站也可以运行访问vue项目）
cnpm install -g pm2
进入需要启动的vue项目：
cd /www/demo
之后运行这个服务：（即可以在服务器中一直运行npm run dev）
pm2 start npm -- run dev (注意空格)
查看运行状态：
pm2 list

(05-13)处理路由切换的bug，大致完成每个页面的基本架构。
处理的bug：
vue路由的切换中可以使用this.$router.push({})以及<router-link :to=""></router-link>两种方法
这里推介使用第二种内嵌<a>标签的方法，选中它时会自懂增加一个class样式，
可以用来给选中时候的路由加上相应样式，而用第一种会出现重新刷新当前路由得不到当前样式的尴尬。
(05-14)‘关于’页面增加地图及相关介绍，增加全局媒体查询适配，上传项目至主ip地址。
(05-15)‘关于’页面增加评论功能，增加页面加载时的延迟动画，修正字体显示大小。
(05-16)linux上安装mysql数据库（菜鸟教程+xshell）。
使用navicat连接服务器中的数据库（主ip地址），如出错请复制错误代码百度。之后成功连接数据库。
express搭建后端服务。空目录下安装express框架（参见官方文档）。
(05-17)安装navicat，安装mysql依赖，使用express框架链接数据库。
由于使用express每次更改代码保存都要重新启动项目（npm start或node bin/www），使用这个express会自动保存代码，方便了不少。
cnpm i supervisor -g (启动为supervisor bin/www 一次启动多次运用啊)
测试熟悉使用express、mysql创建接口并使用。
命令窗口中 ctrl + c 实现后退的操作。
(05-20)在config/index.js下proxyTable添加
'/api':{
	target:'http://localhost:3000',
	changeOrigin:true,
	pathRewrite:{
	  '^/api':''
	}}
解决axios跨域问题
(05-21)完成了‘关于’界面的评论发表、评论数据渲染（即一个评论接口的实现）。
完成了发布文章的接口，包括文章发布人的验证以及发布文章的限制。
解决bug记录如下：接口中的时间戳需要渲染到页面，在assets目录下添加了formatDate文件
同时var times = times * 1000 //由于获取的时间戳为毫秒所以需要*1000才可正确得到时间。
(05-23)网站备案成功。优化一些页面，增加图片懒加载插件，增加文章详细界面。
(05-24)处理mysql data too long错误，将要传输字段类型改为text，简单粗暴。
遗留quill文本编辑器的图片上传问题，先就发布图片，等待后续补上。
（9-12）继续探索布置网站：
1、重装服务器系统。
2、https://www.runoob.com/linux/nginx-install-setup.html
http://www.nginx.cn/install（centos环境下nginx安装）。
（11-13）
1、重装服务器系统。
2、centos下nginx安装：
https://www.runoob.com/linux/nginx-install-setup.html。
3、安装ssl证书:
https://blog.csdn.net/duyusean/article/details/79348613。
【server {
    listen 443;
    server_name localhost;
    ssl on;
    root html;
    index index.html index.htm;
    ssl_certificate   ssl/证书名称.crt;
    ssl_certificate_key  ssl/证书名称.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    location / {
        root html;
        index index.html index.htm;
    }
}
将申请的证书放入到nginx/conf/下新建的文件夹ssl中，在nginx.conf下加入如上代码。】
nginx中自动跳转到https的写法：
【 
server {
  listen   80;
  server_name www.lihua6.cn;
  return     301 https://$server_name$request_uri;
}
】（重新加载配置文件、重启nginx）
（11-19）
4、centos下安装node.js环境。
https://www.runoob.com/nodejs/nodejs-install-setup.html（centos环境下安装node.js）
https://www.cnblogs.com/pikaqu/articles/10863391.html。
https://www.cnblogs.com/hellowoeld/p/11596455.html。
5、找点nginx下的html目录，这里的index就是网站的首页。

对于在state对象中给定一个属性（count:100），而在用到mutation方法对它进行算术操作时在vue页面渲染中并没有同步进行数字的更替现况（相反如果是一个数组当中的数字则是可以进行实时的算术运算并可以实时渲染的，其用到了map（）或者forEach（）这些处理数组数据的方法，而单个的数字没有这些方法的加持），到目前为止还没有得出相应的可靠结论。

用this.$el.querySelector('')可以获得相应的元素。

点击头像更换成另一头像，并且在浏览器刷新之后依然保存不会被刷掉（即将换掉的图片保存到了本地存储中），么有接口数据存储在本地。这个实现到了可以更换头像的部分，而没有存储到本地，当重新刷新页面或者加载时会失去刚换的新图片。这部分用的是fileReader这个原生api。
一段时间之后利用location.reload()重新加载更换图片后的页面（即当用户出发更换照片完成时即重新刷新页面）此时就会同步到所有的页面这个头像照片。

安装vue项目运行环境（全局范围）：
1、安装node.js （百度下载安装包以及阅读安装教程）
2、npm i -g cnpm （使用淘宝镜像，国内npm）
3、npm i -g vue-cli （安装vue的脚手架）
4、vue init webpack project （新目录下创建新的vue项目）
5、cnpm run dev（一般项目所有环境搭好之后的运行code）

对于已经安装过vue-cli脚手架的环境，运行clone过来的项目时：cnpm i

安装sass预编译器：
cnpm i node-sass --save-dev
cnpm i sass-loader --save-dev

安装axios http的请求：
cnpm i axios

安装lib-flexible（即使用rem单位来适配移动端）：
cnpm i lib-flexible --save

安装模拟数据mockjs（模拟后台接口数据）
cnpm i mockjs

安装上拉刷新下拉加载的插件
cnpm i vue-scroller -D

安装移动端的滚动插件
cnpm i better-scroll -s

关于跨域的一些笔记：
导致跨域的出现――浏览器的同源策略（协议、域名、端口）
csrf攻击（跨站请求伪造），攻击者盗用身份信息（即自己的帐号被盗了）
xss攻击（跨站脚本攻击），网页中嵌入脚本进行相应攻击
处理跨域的方法，jsonp，空iframe加form，cors，
axios、vue-resource都可获取接口数据，即响应http请求，vue2.0之后推荐使用axios

【vue部署到服务器】
1、本地项目完成后，修改config/index.js中的dev{assetsPublicPath:'/'}，路径改为'./'。
2、执行：npm run build，成功后在原目录下生成dist文件夹。
3、将dist丢入nginx执行html文件的地方。
（上述方法每次vue的更新都需要本地build，然后再将dist文件夹丢入服务器，
甚至在更改路径后本地不能运行的情况，所以参考一下步骤）
1、本地项目完成后，修改config/index.js中的dev{assetsPublicPath:'/'}，路径改为'./'。
2、将vue项目代码（除node_module外）整体丢到nginx执行html文件的文件夹里面。
3、进入服务器，进入到刚才丢入的vue项目里，执行npm install,安装所有的依赖。
4、执行npm run build，生成dist文件夹。
5、再nginx.conf中修改server的指向目录，一般是 root{html}更改为root{html/dist}。
6、重启nginx服务即可。